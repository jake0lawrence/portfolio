name: CI & Deploy to droplet

# ──────────────────────────────────────────────────────────────
# Triggers
# ──────────────────────────────────────────────────────────────
on:
  push:
    branches: [ main ]
  workflow_dispatch:

# ──────────────────────────────────────────────────────────────
# Global versions
# ──────────────────────────────────────────────────────────────
env:
  NODE_VERSION: "20"        # keep in sync with the droplet runtime
  PNPM_VERSION: "10.12.1"   # lock major/minor for reproducibility

# ──────────────────────────────────────────────────────────────
# 1) Continuous-Integration job
# ──────────────────────────────────────────────────────────────
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out code
      - name: ⬇️  Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Install Node.js (official action)
      - name: 🟦  Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 3. Install pnpm (no Node input here)
      - name: 🐣  Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false        # we run install ourselves below

      # 4. Install dependencies (uses pnpm cache)
      - name: 📦  Install deps
        run: pnpm install --frozen-lockfile --silent

      # 5. Lint, unit tests, and production build
      - name: 🚦  Lint, test, build
        run: |
          pnpm lint
          pnpm test
          pnpm run build

# ──────────────────────────────────────────────────────────────
# 2) Deploy (runs only if “test” succeeded on main)
# ──────────────────────────────────────────────────────────────
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: 🚀  Trigger DigitalOcean webhook
        env:
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          # Optional override via secret; falls back to canonical URL
          WEBHOOK_URL:    ${{ secrets.WEBHOOK_URL }}
        run: |
          URL="${WEBHOOK_URL:-https://jakelawrence.io/deploy}"
          echo "Curling $URL"
          curl --fail --silent --show-error "${URL}?secret=${WEBHOOK_SECRET}"
